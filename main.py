from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import datetime
import requests
from aiogram.utils import executor
import  os
bot = Bot(token=str(os.environ.get("TOK")))

dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


class Status(Helper):
    mode = HelperMode.snake_case
    STATE_1 = ListItem()


ApiKey = '688b588d9d56ba800218ae7f86cf55d2'


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    start_message = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ–≥ –ø–æ–≥–æ–¥—ã - –î–æ–≥–æ–¥–∞. \n' \
                    '–Ø –º–æ–≥—É —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ø–æ—á—Ç–∏ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö –º–∏—Ä–∞.\n' \
                    '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–ø–∏—à–∏: /info'
    button_info = KeyboardButton('/info')
    greet_kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(button_info)
    await bot.send_message(message.chat.id, start_message, reply_markup=greet_kb1)


@dp.message_handler( commands=['info'])
async def info(message):
    info_message = '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏: /weather (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –∞ –ø–æ—Ç–æ–º –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–∞ ' \
                   '–ø–æ–≥–æ–¥–∞, –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, —É–∫–∞–∑–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä ' \
                   '—Å—Ç—Ä–∞–Ω—ã, –≥–¥–µ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –≠—Ç–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É ' \
                   '–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n' \
                   '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞: Moscow; –õ–æ–Ω–¥–æ–Ω, GB; –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥; –ù—å—é-–ô–æ—Ä–∫.\n' \
                   '–°–Ω–∏–∑—É –ø–æ—è–≤–∏—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±–æ–ª—å—à–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –∏—Ö.\n' \
                   '(–∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã)'
    markup_reply_info = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_reply_info.add('/weather')
    await bot.send_message(message.chat.id, info_message, reply_markup=markup_reply_info)


@dp.message_handler( commands=['weather'])
async def weather_step1(message):
    state = dp.current_state(user=message.chat.id)
    print(message)
    weather_message = '–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ info'
    markup_reply_cities = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_reply_cities.add('–ú–æ—Å–∫–≤–∞, RU', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, RU')
    markup_reply_cities.add('–õ–æ–Ω–¥–æ–Ω, GB', '–í–∞—à–∏–Ω–≥—Ç–æ–Ω, US')
    markup_reply_cities.add('–ü–∞—Ä–∏–∂, FR', '–ü—Ä–∞–≥–∞, CZ')
    markup_reply_cities.add('–ë–µ—Ä–ª–∏–Ω, DE', '–¢–æ–∫–∏–æ, JP')
    markup_reply_cities.add('–ü–µ–∫–∏–Ω, CN', '–ù—å—é-–î–µ–ª–∏, IN')
    await bot.send_message(message.chat.id, weather_message, reply_markup=markup_reply_cities)
    await state.set_state(Status.all()[0])


@dp.message_handler(state=Status.STATE_1)
async def weather_step2(message):
    city = message.text
    info = requests.get('http://api.openweathermap.org/data/2.5/find',
                        params={'q': city, 'type': 'like', 'units': 'metric', 'lang': 'ru', 'APPID': ApiKey})
    data = info.json()
    try:
        city_id = data['list'][0]['id']
        weather = requests.get('http://api.openweathermap.org/data/2.5/weather',
                               params={'id': city_id, 'units': 'metric', 'lang': 'ru', 'APPID': ApiKey})
        data = weather.json()
        time = str(datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=data['timezone'] / 3600)))).split()
        main_message = f"{data['name']}, {data['sys']['country']}\n" \
                       f"–î–∞—Ç–∞: {'.'.join(time[0].split('-')[::-1])} ‚è±\n" \
                       f"–í—Ä–µ–º—è: {time[1][:-13]}, UTC{time[1][-6:]} üïü\n" \
                       f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {data['weather'][0]['description'].capitalize()} üåè\n" \
                       f"üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞,\n–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data['main']['feels_like']}¬∞üå°\n" \
                       f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {data['wind']['speed']} –º/—Å üí®\n" \
                       f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: ~{data['main']['humidity']}% üíß"
        d_icon = data["weather"][0]["icon"]
        markup_reply_weather = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_reply_weather.add('/weather')
        await bot.send_photo(message.chat.id, f"http://openweathermap.org/img/wn/{d_icon}@2x.png",
                             caption=main_message, )
        await bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å\n/weather (–µ—Å–ª–∏ –Ω–∞–¥–æ)',
                               reply_markup=markup_reply_weather)
        markup_reply_weather = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup_reply_weather.add('/weather')
        state = dp.current_state(user=message.from_user.id)
        await state.finish()
    except LookupError:
        error_message = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: 1) –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ ' \
                        '–≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç–µ; 2) –í—ã –∏—â–µ—Ç–µ –æ—á–µ–Ω—å –º–∞–ª–æ–ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, ' \
                        '–Ω–æ —ç—Ç–æ –ø–æ—á—Ç–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, 1 –≤–∞—Ä–∏–∞–Ω—Ç –∫—É–¥–∞ –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—Ç–µ –≤–≤–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ' \
                        '–≥–æ—Ä–æ–¥ –µ—â—ë —Ä–∞–∑.'
        await bot.send_message(message.chat.id, error_message)

@dp.message_handler(content_types=['text', 'voice', 'audio', 'document', 'photo', 'sticker', 'video', 'location'])
async def notcommand(message):
    print(message)
    notcommand_message = '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, /info –∏–ª–∏ /weather, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é.'
    await bot.send_message(message.chat.id, notcommand_message)
executor.start_polling(dp)
